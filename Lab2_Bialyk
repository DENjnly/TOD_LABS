from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score
import joblib

# Завантаження датасету Iris
data = load_iris()
X = data.data
y = data.target

# Поділ датасету на тренувальну та тестову вибірки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Створення пайплайну
pipeline = Pipeline([
    ('scaling', StandardScaler()),
    ('pca', PCA()),
    ('classification', LogisticRegression())
])

# Визначення гіперпараметрів для налаштування
parameters = {
    'pca__n_components': [2, 3],
    'classification__C': [0.1, 1, 10]
}

# Настройка гіперпараметрів та відбір ознак за допомогою GridSearchCV
grid_search = GridSearchCV(pipeline, parameters)
grid_search.fit(X_train, y_train)

# Оцінка якості моделі на тестовій вибірці
y_pred = grid_search.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Збереження навченого пайплайну
joblib.dump(grid_search, 'iris_pipeline.joblib')

# Завантаження пайплайну з файлу
loaded_pipeline = joblib.load('iris_pipeline.joblib')

# Використання завантаженого пайплайну для прогнозу на нових даних
new_data = [[5.1, 3.5, 1.4, 0.2], [6.2, 2.9, 4.3, 1.3]]
predictions = loaded_pipeline.predict(new_data)
print("Predictions:", predictions)
